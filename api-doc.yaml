swagger: "2.0"
info:
    description: "This will have content of description for your api"
    version: "1.0.0"
    title: "API Documentation Example"
host: "localhost:3000"
basePath: "/api/v1"
paths:
    # ---- USERS
    /user/login:
        post:
            summary: "Login"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      required:
                          - "email"
                          - "password"
                      properties:
                          email:
                              type: "string"
                          password:
                              type: "string"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                status:
                                    type: "string"
                                data:
                                    type: "object"
                                    properties:
                                        userCredentials:
                                            $ref: "#/definitions/userCredentials"
                                        token:
                                            type: "string"
                "400":
                    description: "Server Error"
                    $ref: "#/definitions/errorResponse"

    /user/register:
        post:
            summary: "Register"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      required:
                          - "name"
                          - "username"
                          - "email"
                          - "password"
                      properties:
                          name:
                              type: "string"
                          username:
                              type: "string"
                          email:
                              type: "string"
                          password:
                              type: "string"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                status:
                                    type: "string"
                                data:
                                    type: "object"
                                    properties:
                                        userCredentials:
                                            $ref: "#/definitions/userCredentials"
                "400":
                    description: "Server Error"
                    $ref: "#/definitions/errorResponse"

    /whoami:
        get:
            summary: "Who am I"
            description: ""
            produces:
                - "application/json"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                status:
                                    type: "string"
                                data:
                                    type: "object"
                                    properties:
                                        id:
                                            type: "integer"
                                        name:
                                            type: "string"
                                        username:
                                            type: "string"
                                        email:
                                            type: "string"
                "400":
                    description: "Server Error"
                    $ref: "#/definitions/errorResponse"
            security:
                - bearerAuth: []

    /user/update:
        put:
            summary: "Update user data by id"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      required:
                          - "id"
                          - "name"
                          - "username"
                          - "email"
                          - "roleId"
                      properties:
                          id:
                              type: "integer"
                          name:
                              type: "string"
                              nullable: true
                          username:
                              type: "string"
                              nullable: true
                          email:
                              type: "string"
                              nullable: true
                          roleId:
                              type: "integer"
                              nullable: true
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                status:
                                    type: "string"
                                data:
                                    type: "object"
                                    properties:
                                        userCredentials:
                                            $ref: "#/definitions/userCredentials"
                "400":
                    description: "Server Error"
                    $ref: "#/definitions/errorResponse"
            security:
                - bearerAuth: []

    # ---- CARS
    # Get all cars
    /cars:
        get:
            summary: "Get car lists"
            description: ""
            produces:
                - "application/json"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                status:
                                    type: "string"
                                data:
                                    type: "object"
                                    properties:
                                        cars:
                                            type: "array"
                                            items:
                                                type: "object"
                                                $ref: "#/definitions/carProperties"
                "400":
                    description: "Server Error"
                    $ref: "#/definitions/errorResponse"
            security:
                - bearerAuth: []

    # Create car
    /car/create:
        post:
            summary: "Create car data"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      required:
                          - "name"
                          - "description"
                          - "price"
                          - "image"
                          - "sizeId"
                      properties:
                          name:
                              type: "string"
                          description:
                              type: "string"
                          price:
                              type: "integer"
                          image:
                              type: "string"
                          sizeId:
                              type: "integer"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                status:
                                    type: "string"
                                data:
                                    type: "object"
                                    $ref: "#/definitions/carProperties"
                "400":
                    description: "Server Error"
                    schema:
                        items:
                            type: "object"
                            properties:
                                status:
                                    type: "string"
                                message:
                                    type: "array"
                                    items:
                                        type: "object"
                                        properties:
                                            msg:
                                                type: "string"
                                            param:
                                                type: "string"
                                            location:
                                                type: "string"

            security:
                - bearerAuth: []

    # Update car
    /car/update:
        put:
            summary: "Update car data by id"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      required:
                          - "id"
                          - "name"
                          - "description"
                          - "price"
                          - "sizeId"
                          - "image"
                      properties:
                          id:
                              type: "integer"
                          name:
                              type: "string"
                          description:
                              type: "string"
                          price:
                              type: "integer"
                          sizeId:
                              type: "integer"
                          image:
                              type: "string"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                status:
                                    type: "string"
                                data:
                                    type: "object"
                                    $ref: "#/definitions/carProperties"
                "400":
                    description: "Server Error"
                    $ref: "#/definitions/errorResponse"
            security:
                - bearerAuth: []

    # Get car by id
    /car/find:
        post:
            summary: "Find car by id"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      required:
                          - "id"
                      properties:
                          id:
                              type: "integer"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                status:
                                    type: "string"
                                data:
                                    type: "object"
                                    $ref: "#/definitions/carProperties"
                "400":
                    description: "Server Error"
                    $ref: "#/definitions/errorResponse"
            security:
                - bearerAuth: []

    # delete car by id
    /car/delete:
        post:
            summary: "Soft delete car by changing isActive value to false"
            description: "You can use this endpoint to take a peek any deleted car data by id"
            produces:
                - "application/json"
            parameters:
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      required:
                          - "id"
                      properties:
                          id:
                              type: "integer"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                status:
                                    type: "string"
                                data:
                                    type: "object"
                                    $ref: "#/definitions/carProperties"
                "400":
                    description: "Server Error"
                    $ref: "#/definitions/errorResponse"
            security:
                - bearerAuth: []

# Authorization
securityDefinitions:
    bearerAuth:
        name: Authorization # arbitrary name for the security scheme
        type: apiKey
        scheme: bearer
        in: header

definitions:
    # userResponse
    userCredentials:
        type: "object"
        properties:
            id:
                type: "integer"
            roleId:
                type: "integer"
            name:
                type: "string"
            username:
                type: "string"
            email:
                type: "string"
            isActive:
                type: "boolean"
            createdAt:
                type: "string"
                format: "date-time"
            updatedAt:
                type: "string"
                format: "date-time"
    # errorResponse
    errorResponse:
        schema:
            items:
                type: "object"
                properties:
                    error:
                        type: "string"
                    message:
                        type: "string"
    # carProperties
    carProperties:
        properties:
            id:
                type: "integer"
            sizeId:
                type: "integer"
            name:
                type: "string"
            description:
                type: "string"
            price:
                type: "integer"
            image:
                type: "string"
            isActive:
                type: "boolean"
            createdBy:
                type: "string"
            updatedBy:
                type: "string"
                nullable: true
            deletedBy:
                type: "string"
                nullable: true
            deletedAt:
                type: "string"
                nullable: true
                format: "date-time"
            createdAt:
                type: "string"
                format: "date-time"
            updatedAt:
                type: "string"
                format: "date-time"
